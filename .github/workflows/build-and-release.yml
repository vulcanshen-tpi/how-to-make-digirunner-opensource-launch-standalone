name: Build and Release Combined Package

on:
  workflow_dispatch:
    inputs:
      digiRunner_version:
        description: 'digiRunner-Open-Source Release Tag (e.g.,v4.5.13.1-rc)'
        required: true
        default: 'v4.5.13.1-rc'
      task_compose_version:
        description: 'task-compose Release Tag (e.g., 1.2.0)'
        required: true
        default: '1.2.0'
      java_arch:
        description: 'Java JRE Architecture (e.g., x64, arm64)'
        required: true
        default: 'amd64'
        type: choice 
        options:
          - amd64
          - arm64
      java_os:
        description: 'Java JRE OS (e.g., linux, mac)'
        required: true
        type: choice 
        options: 
          - windows
          - darwin
        default: 'windows'
      release_tag:
        description: 'Target Release Tag for this project (e.g., v1.0.0)'
        required: true

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要寫入權限才能創建 Release

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Environment Variables
      run: |
        echo "DIGIRUNNER_VERSION=${{ github.event.inputs.digiRunner_version }}" >> $GITHUB_ENV
        echo "TASK_COMPOSE_VERSION=${{ github.event.inputs.task_compose_version }}" >> $GITHUB_ENV
        echo "JAVA_ARCH=${{ github.event.inputs.java_arch }}" >> $GITHUB_ENV
        echo "JAVA_OS=${{ github.event.inputs.java_os }}" >> $GITHUB_ENV
        echo "RELEASE_TAG=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
        echo "TEMP_DIR=temp_extract" >> $GITHUB_ENV

    - name: Download digiRunner-Open-Source h2-pack.zip
      uses: robinraju/release-downloader@v1
      with:
        repo: TPIsoftwareOSPO/digiRunner-Open-Source
        tag: ${{ env.DIGIRUNNER_VERSION }}
        fileName: 'h2-pack.zip' # 假設檔案名稱為 a.zip
        out-path: ./downloads # 下載到 ./downloads 目錄

    - name: Set Release Asset Extension based on OS
      id: set_extension # 為這個步驟指定 ID，以便引用其輸出
      run: |
        if [ "${{ env.JAVA_OS }}" == "windows" ]; then
          echo "ZULU_JRE_DOWNLOAD_URL=https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-win_x64.zip" >> $GITHUB_ENV
          echo "TASK_COMPOSE_ASSET_NAME=task-compose-portable_${{ env.JAVA_OS }}_${{ env.JAVA_ARCH }}.zip" >> $GITHUB_ENV
        elif [ "${{ env.JAVA_OS }}" == "darwin" ]; then
          echo "ZULU_JRE_DOWNLOAD_URL=https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-macosx_aarch64.zip" >> $GITHUB_ENV
          echo "TASK_COMPOSE_ASSET_NAME=task-compose-portable_${{ env.JAVA_OS }}_${{ env.JAVA_ARCH }}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Download task-compose-portable.zip
      uses: robinraju/release-downloader@v1
      with:
        repo: vulcanshen-tpi/task-compose
        tag: ${{ env.TASK_COMPOSE_VERSION }}
        fileName: '${{ env.TASK_COMPOSE_ASSET_NAME }}'
        out-path: ./downloads

    - name: Download Java 21 JRE from Azul Zulu
      run: |
        echo "Downloading Java JRE from: ${{ env.ZULU_JRE_DOWNLOAD_URL }}"
        curl -L -o ./downloads/java_jre.zip "${{ env.ZULU_JRE_DOWNLOAD_URL }}""
        if [ $? -ne 0 ]; then
          echo "Error: Java JRE download failed from $JAVA_URL"
          exit 1
        fi
        
    - name: Create Temporary Extraction Directory
      run: mkdir -p ${{ env.TEMP_DIR }}

    - name: Extract digiRunner-Open-Source a.zip
      run: unzip ./downloads/h2-pack.zip -d ${{ env.TEMP_DIR }}/dgr_content && rm ./downloads/h2-pack.zip

    - name: Extract task-compose ${{ env.TASK_COMPOSE_ASSET_NAME }}
      run: unzip ./downloads/${{ env.TASK_COMPOSE_ASSET_NAME }} -d ${{ env.TEMP_DIR }}/task_compose_content && rm ./downloads/${{ env.TASK_COMPOSE_ASSET_NAME }}

    - name: Extract Java JRE zip
      run: |
        # Java JRE 的 zip 包解壓縮後通常會是一個帶有版本號的目錄 (例如 zulu21.0.3-fx-jre-fx-linux_x64)
        # 我們需要找到這個目錄並將其內容移動出來
        unzip ./downloads/java_jre.zip -d ${{ env.TEMP_DIR }}/java_content && rm ./downloads/java_jre.zip
        # 找到解壓縮後的第一層目錄，然後將其內容移動到 TEMP_DIR/java_content/jre_root
        JAVA_ROOT_DIR=$(find "${{ env.TEMP_DIR }}/java_content" -mindepth 1 -maxdepth 1 -type d -print -quit)
        if [ -d "$JAVA_ROOT_DIR" ]; then
          mv "$JAVA_ROOT_DIR"/* "${{ env.TEMP_DIR }}/java_content/"
          rmdir "$JAVA_ROOT_DIR" # 移除空目錄
        else
          echo "Warning: Java JRE root directory not found as expected. Check zip structure."
        fi
        # 如果 zulu zip 直接解壓就是 jre/ 目錄，那麼請調整上方的 unzip -d 參數
        # 並確保最終 jre 的內容在 ${{ env.TEMP_DIR }}/java_content/jre/ 內

    - name: Consolidate Files and Create Combined ZIP
      run: |
        # 將所有解壓縮的內容移動到一個最終的合併目錄
        mkdir -p combined_root
        mv ${{ env.TEMP_DIR }}/dgr_content/* combined_root/
        mv ${{ env.TEMP_DIR }}/task_compose_content/* combined_root/
        mv ${{ env.TEMP_DIR }}/java_content/* combined_root/ # 假設 java JRE 的核心內容就在 java_content 下

        # 重新打包成一個新的 zip 檔案
        zip -r ${{ env.JAVA_OS }}_${{ env.JAVA_ARCH }}.zip combined_root/
        
        # 清理臨時目錄
        rm -rf ${{ env.TEMP_DIR }} combined_root

    - name: Create GitHub Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Combined Release ${{ env.RELEASE_TAG }}
        body: |
          Combined package generated from:
          - digiRunner-Open-Source: ${{ env.DIGIRUNNER_VERSION }}
          - task-compose: ${{ env.TASK_COMPOSE_VERSION }}
          - Java JRE 21 (${{ env.JAVA_OS }}/${{ env.JAVA_ARCH }})
        files: ${{ env.JAVA_OS }}_${{ env.JAVA_ARCH }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用內建的 GITHUB_TOKEN