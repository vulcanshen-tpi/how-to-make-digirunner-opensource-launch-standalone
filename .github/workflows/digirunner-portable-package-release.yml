name: digirunner portable package release

on:
  workflow_dispatch:
    inputs:
      digiRunner_version:
        description: 'digiRunner-Open-Source Release Tag (e.g.,v4.5.13.1-rc)'
        required: true
        default: 'v4.5.13.1-rc'
      task_compose_version:
        description: 'task-compose Release Tag (e.g.,v1.2.0)'
        required: true
        default: 'v1.2.0'
      release_tag:
        description: 'Target Release Tag for this project (e.g., v1.0.0)'
        required: true

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要寫入權限才能創建 Release

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Environment Variables
      run: |
        echo "DIGIRUNNER_VERSION=${{ github.event.inputs.digiRunner_version }}" >> $GITHUB_ENV
        echo "TASK_COMPOSE_VERSION=${{ github.event.inputs.task_compose_version }}" >> $GITHUB_ENV
        echo "RELEASE_TAG=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
        echo "TEMP_DIR=temp_extract" >> $GITHUB_ENV

    - name: Download digiRunner-Open-Source h2-pack.zip
      uses: robinraju/release-downloader@v1
      with:
        repository: TPIsoftwareOSPO/digiRunner-Open-Source
        tag: ${{ env.DIGIRUNNER_VERSION }}
        fileName: 'h2-pack.zip' # 假設檔案名稱為 a.zip
        out-file-path: ./downloads # 下載到 ./downloads 目錄

    - name: Set Release Asset Extension based on OS
      id: set_extension # 為這個步驟指定 ID，以便引用其輸出
      run: |
        ORIGINAL_TASK_COMPOSE_VERSION="${{ env.TASK_COMPOSE_VERSION }}"
        
        CLEANED_TASK_COMPOSE_VERSION="${ORIGINAL_TASK_COMPOSE_VERSION#v}"

        # windows components
        echo "TASK_COMPOSE_WIN_ASSET_NAME=task-compose-portable_${CLEANED_TASK_COMPOSE_VERSION}_windows_amd64.zip" >> $GITHUB_ENV
        
        # mac components
        echo "TASK_COMPOSE_MAC_ASSET_NAME=task-compose-portable_${CLEANED_TASK_COMPOSE_VERSION}_darwin_arm64.tar.gz" >> $GITHUB_ENV

    - name: Download windows task-compose-portable
      uses: robinraju/release-downloader@v1
      with:
        repository: vulcanshen-tpi/task-compose
        tag: ${{ env.TASK_COMPOSE_VERSION }}
        fileName: '${{ env.TASK_COMPOSE_WIN_ASSET_NAME }}'
        out-file-path: ./downloads/win/task-compose

    - name: Download mac task-compose-portable
      uses: robinraju/release-downloader@v1
      with:
        repository: vulcanshen-tpi/task-compose
        tag: ${{ env.TASK_COMPOSE_VERSION }}
        fileName: '${{ env.TASK_COMPOSE_MAC_ASSET_NAME }}'
        out-file-path: ./downloads/mac/task-compose

    - name: Download Win Java 21 JRE from Azul Zulu
      run: |
        echo "Downloading Win Java JRE from: https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-win_x64.zip"
        curl -L -o ./downloads/win/java_jre.zip https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-win_x64.zip
        if [ $? -ne 0 ]; then
          echo "Error: Java JRE download failed from $JAVA_URL"
          exit 1
        fi
        echo "Downloading Mac Java JRE from: https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-macosx_aarch64.zip"
        curl -L -o ./downloads/mac/java_jre.zip https://cdn.azul.com/zulu/bin/zulu21.42.19-ca-jre21.0.7-macosx_aarch64.zip
        if [ $? -ne 0 ]; then
          echo "Error: Java JRE download failed from $JAVA_URL"
          exit 1
        fi
        
    - name: Create Temporary Extraction Directory
      run: mkdir -p ${{ env.TEMP_DIR }}

    - name: Extract digiRunner-Open-Source a.zip
      run: unzip ./downloads/h2-pack.zip -d ${{ env.TEMP_DIR }}/dgr_content && rm ./downloads/h2-pack.zip

    - name: Extract win task-compose ${{ env.TASK_COMPOSE_WIN_ASSET_NAME }}
      run: |
        mkdir -p ${{ env.TEMP_DIR }}/win/task-compose/
        unzip ./downloads/win/task-compose/${{ env.TASK_COMPOSE_WIN_ASSET_NAME }} -d ${{ env.TEMP_DIR }}/win/task-compose/task_compose_content && rm ./downloads/win/task-compose/${{ env.TASK_COMPOSE_WIN_ASSET_NAME }}
        ls -l ${{ env.TEMP_DIR }}/win/task-compose/task_compose_content

    - name: Extract mac task-compose ${{ env.TASK_COMPOSE_MAC_ASSET_NAME }}
      run: |
        mkdir -p ${{ env.TEMP_DIR }}/mac/task-compose/task_compose_content
        tar -xzf ./downloads/mac/task-compose/${{ env.TASK_COMPOSE_MAC_ASSET_NAME }} -C ${{ env.TEMP_DIR }}/mac/task-compose/task_compose_content && rm ./downloads/mac/task-compose/${{ env.TASK_COMPOSE_MAC_ASSET_NAME }}
        ls -l ${{ env.TEMP_DIR }}/mac/task-compose/task_compose_content

    - name: Extract Java JRE zip
      run: |
        # Java JRE 的 zip 包解壓縮後通常會是一個帶有版本號的目錄 (例如 zulu21.0.3-fx-jre-fx-linux_x64)
        # 我們需要找到這個目錄並將其內容移動出來
        unzip -q ./downloads/win/java_jre.zip -d ${{ env.TEMP_DIR }}/win/jre && rm ./downloads/win/java_jre.zip
        unzip -q ./downloads/mac/java_jre.zip -d ${{ env.TEMP_DIR }}/mac/jre && rm ./downloads/mac/java_jre.zip
        ls -l ${{ env.TEMP_DIR }}/win/jre 
        ls -l ${{ env.TEMP_DIR }}/mac/jre


    - name: Consolidate Files and Create Combined ZIP
      run: |
        mkdir -p windows_amd64
        mv ${{ env.TEMP_DIR }}/win/* windows_amd64/
        mv ${{ env.TEMP_DIR }}/win/task-compose/task_compose_content/* windows_amd64/
        mv ${{ env.TEMP_DIR }}/java_content/* windows_amd64/
        zip -r windows_amd64.zip windows_amd64/

        mkdir -p mac_arm64
        mv ${{ env.TEMP_DIR }}/mac/* mac_arm64/
        mv ${{ env.TEMP_DIR }}/mac/task-compose/task_compose_content/* mac_arm64/
        mv ${{ env.TEMP_DIR }}/java_content/* mac_arm64/
        zip -r mac_arm64.zip mac_arm64/
        # 清理臨時目錄
        rm -rf ${{ env.TEMP_DIR }} mac_arm64/ windows_amd64/

    - name: Create GitHub Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: digirunner portable package ${{ env.RELEASE_TAG }}
        body: |
          Combined package generated from:
          - digiRunner-Open-Source: ${{ env.DIGIRUNNER_VERSION }}
          - task-compose: ${{ env.TASK_COMPOSE_VERSION }}
          - Java JRE 21 (${{ env.JAVA_OS }}/${{ env.JAVA_ARCH }})
        files: |
          - windows_amd64.zip
          - mac_arm64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}